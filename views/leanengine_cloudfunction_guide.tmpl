# 云函数开发指南 &middot; {{platformName}}

云函数是云引擎（{{productName}}）的一个子模块，请确保阅读本文档之前，你已经阅读了 [云引擎服务概览](leanengine_overview.html)。

云函数是指开发者在使用 LeanCloud SDK，针对服务端的功能有自己特殊的自定义需求的时候，可以使用 {{productName}} 提供的云函数来实现。云函数包含以下几种：

<dl>
  <dt>Hook 类型</dt>
  <dd>比如有些应用想在用户注册时候给用户统一分配一个会员号，如果把生成会员号的代码放在客户端难免会造成编号冲突并且不便于统一算法，这个时候就可以使用云函数提供的 Hook 函数针对用户 login 接口做统一的处理。</dd>
  <dt>自定义类型</dt>
  <dd>比如有些应用会需要计算用户的账单信息，账单的计算依赖于多张表的查询结果，如果都放在客户端去做，那么 iOS 要写一套算法，Android 也要写一套算法，这显然是工作冗余，因此如果可以在服务单放一个 HTTP（HTTPS）接口让每一个客户端统一调用就可以解决这个问题。</dd>
</dl>

我们设定如下场景：一个给电影书籍评分的系统，假设把存储分数这个操作放在客户端，那么 iOS、Android 等诸多客户端都得构建几乎相同的一套算法业务逻辑代码，因此我们可以在 {{productName}} 上部署一套满足自己需求的云函数来实现这个功能。

使用云函数之前，请确保你已仔细阅读了客户端 SDK 的开发指南，因为云函数在很多时候是与客户端结合起来才能发挥更大的效用。

## Hook 函数
{{storageName}} 提供的基于对象的存储，因此在客户端存储对象的时候，很多时候一些针对对象的统一操作需要在各个客户端进行相同的处理，正如前面说的统一为新注册用户提供唯一会员号，这种操作 {{productName}} 就通过 Hook 函数来开放给开发者自定义。

Hook 函数本质上是云函数，但它有固定的名称，定义之后会**由系统**在特定事件或操作（如数据保存前、保存后，数据更新前、更新后等等）发生时**自动触发**，而不是由开发者来控制其触发时机。

使用 Hook 函数需要注意 [防止死循环调用](#防止死循环调用)。

### {{hook_before_save}}
在将对象保存到云端数据表之前，可以对数据做一些清理或验证。例如，一条电影评论不能过长，否则界面上显示不开，需要将其截断至 140 个字符：

{% block beforeSaveExample %}{% endblock %}

### {{hook_after_save}}

在数据保存后触发指定操作，比如当一条留言保存后再更新一下所属帖子的评论总数：

{% block afterSaveExample %}{% endblock %}

再如，在用户注册成功之后，给用户增加一个新的属性 from 并保存：

{% block afterSaveExample2 %}{% endblock %}

如果 `afterSave` 函数调用失败，save 请求仍然会返回成功应答给客户端。`afterSave` 发生的任何错误，都将记录到云引擎日志里，可以到 [控制台 > 存储 > 云引擎 > 日志](https://leancloud.cn/cloud.html?appid={{appid}}#/log) 中查看。

### {{hook_before_update}}

{% block beforeUpdate %}
在更新对象前执行操作，这时你可以知道哪些字段已被修改，还可以在特定情况下拒绝本次修改：

{% block beforeUpdateExample %}{% endblock %}

**注意**：传入的对象是一个尚未保存到数据库的临时对象，并不保证与最终储存到数据库的对象完全相同，这是因为修改中可能包含自增、数组增改、关系增改等原子操作。
{% endblock %}

### {{hook_after_update}}

在更新对象后执行特定的动作，比如每次修改文章后记录下日志：

{% block afterUpdateExample %}{% endblock %}

### {{hook_before_delete}}

在删除一个对象之前做一些检查工作，比如在删除一个相册 Album 前，先检查一下该相册中还有没有照片 Photo：

{% block beforeDeleteExample %}{% endblock %}

### {{hook_after_delete}}

在被删一个对象后执行操作，例如递减计数、删除关联对象等等。同样以相册为例，这次我们不在删除相册前检查是否还有照片，而是在删除后，同时删除相册中的照片：

{% block afterDeleteExample %}{% endblock %}

### {{hook_on_verified}}

当用户通过邮箱或者短信验证时，对该用户执行特定操作。比如：

{% block onVerifiedExample %}{% endblock %}

函数的第一个参数是验证类型。短信验证为 `sms`，邮箱验证为 `email`。另外，数据库中相关的验证字段，如 `emailVerified` 不需要修改，系统会自动更新。

### {{hook_on_login}}

在用户登录之时执行指定操作，比如禁止在黑名单上的用户登录：

{% block onLoginExample %}{% endblock %}

### 实时通信 Hook 函数

请阅读 [实时通信概览 &middot; 云引擎 Hook](realtime_v2.html#云引擎_Hook) 来了解以下函数的具体用法：

- `_messageReceived`
- `_receiversOffline`
- `_conversationStart`
- `_conversationAdd`
- `_conversationRemove`

{% block hookDeadLoop %}

### 防止死循环调用

在实际使用中有这样一种场景：在 `Post` 类的 `afterUpdate` Hook 函数中，对传入的 `Post` 对象做了修改并且保存，而这个保存动作又会再次触发 `afterUpdate`，由此形成死循环。针对这种情况，我们为所有 Hook 函数传入的 `request.object` 对象做了处理，以阻止死循环调用的产生。

不过请注意，以下情况还需要开发者自行处理：

- 对传入的 `request.object` 对象进行 `fetch` 操作。
- 重新构造传入的 `request.object` 对象，如使用 `AV.Object.createWithoutData()` 方法。

对于使用上述方式产生的对象，请根据需要自行调用以下 API：

- `object.disableBeforeHook()` 或 
- `object.disableAfterHook()` 

这样，对象的保存或删除动作就不会再次触发相关的 Hook 函数。

```javascript
AV.Cloud.afterUpdate('Post', function(request) {
    // 直接修改并保存对象不会再次触发 afterUpdate Hook 函数
    request.object.set('foo', 'bar');
    request.object.save().then(function(obj) {
      // 你的业务逻辑
    });

    // 如果有 fetch 操作，则需要在新获得的对象上调用相关的 disable 方法
    // 来确保不会再次触发 Hook 函数
    request.object.fetch().then(function(obj) {
      obj.disableAfterHook();
      obj.set('foo', 'bar');
      return obj.save();
    }).then(function(obj) {
      // 你的业务逻辑
    });

    // 如果是其他方式构建对象，则需要在新构建的对象上调用相关的 disable 方法
    // 来确保不会再次触发 Hook 函数
    var obj = AV.Object.createWithoutData('Post', request.object.id);
    obj.disableAfterHook();
    obj.set('foo', 'bar');
    obj.save().then(function(obj) {
      // 你的业务逻辑
    });
  });
```

**提示**：云引擎 Node.js 环境从 [0.3.0](https://github.com/leancloud/leanengine-node-sdk/blob/master/CHANGELOG.md#v030-20151231) 开始支持 `object.disableBeforeHook()` 和 `object.disableAfterHook()`。
{% endblock %}

### 错误响应码

{% block errorCodeExample %}{% endblock %}

客户端收到的响应：`{"code":211,"error":"Could not find user"}`

{% block errorCodeExample2 %}{% endblock %}

客户端收到的响应： `{"code":123,"error":"自定义错误信息"}`

#### Hook 函数的区别

为 `{{hook_before_save}}` 这类的 hook 函数定义错误码，需要这样：

{% block errorCodeExampleForHooks %}{% endblock %}

客户端收到的响应为：`Cloud Code validation failed. Error detail : {"code":123, "message": "自定义错误信息"}`，然后通过**截取字符串**的方式取出错误信息，再转换成需要的对象。

## 自定义云函数
自定义云函数本质上是为了给开发者自定义服务端逻辑，例如有些应用的一些功能需要在服务端来实现，自定义云函数就提供了这种功能。

### 在线编写云函数
很多人使用 {{productName}} 是为了在服务端提供一些个性化的方法供各终端调用，而不希望关心诸如代码托管、npm 依赖管理等问题。为此我们提供了在线维护云函数的功能。

使用此功能，你需要注意：

* 会替代你之前 git 或者命令行部署的项目。
* 暂不提供主机托管功能。
* 维护的所有函数可以生成并导出一个完整的项目，供 git 或命令行部署（即将推出）。

![image](images/cloud_code_snippet.png)

左上角的 **创建函数** 可以新创建一个函数，在 `funcName` 输入框里面输入：`averageStars`，并在函数体内输入如下代码：

{% block code_averageStars_sample %}{% endblock %}

然后点击保存，保存成功之后，再点击发布。

上述代码完成的功能是从客户端获取传递过来的电影名称，然后在服务端进行计算，然后将计算结果返回给客户端，如果电影名称不存在则直接返回错误信息。

### 调用云函数

#### 通过 REST API 调用云函数
[REST API 调用云函数](rest_api.html#云函数-1) 是 LeanCloud 云端提供的统一的访问云函数的接口，所有的 SDK 也都是封装了这个接口实现对云函数进行调用的。

关于调试工具，我们推荐的工具有：[Postman](http://www.getpostman.com/) 以及 [Paw](#https://luckymarmot.com/paw) ，他们可以帮助开发者更方便地调试 Web API。

假设没有以上工具，也可以使用命令行进行调试：

```sh
curl -X POST -H "Content-Type: application/json; charset=utf-8" \
       -H "X-LC-Id: {{appid}}" \
       -H "X-LC-Key: {{appkey}}" \
       -H "X-LC-Prod: 0" \
       -d '{"movie":"夏洛特烦恼"}' \
https://leancloud.cn/1.1/functions/averageStars
``` 
上述命令行实际上就是向服务端发送一个 JSON 对象作为参数，参数的内容是告诉服务端要查询的电影的名字。

#### iOS /OS X SDK 调用云函数
在 iOS SDK 中，`AVCloud` 里面提供了一系列的静态方法实现客户端调用云函数，实例代码如下：

```objc
     // 构建传递给服务端的参数字典
     NSDictionary *dicParameters = [NSDictionary dictionaryWithObject:@"夏洛特烦恼" forKey:@"movie"];
    
    // 调用指定名称的云函数，并且传递参数
    [AVCloud callFunctionInBackground:@"averageStars" withParameters:dicParameters block:^(id object, NSError *error) {
        // 执行结果
    }];
```

运行上述代码请确保已经正确安装了 LeanCloud iOS / OS SDK，详细请点击[LeanCloud iOS / OS X SDK 安装指南](sdk_setup-ios.html)。

#### Android SDK 调用云函数
{% block code_client_sdk_callfuntion %}{% endblock %}
在 Android SDK 中，`AVCloud` 里面提供了一系列的静态方法实现客户端调用云函数，实例代码如下：

```java
    // 构建参数
    Map<String, String> dicParameters = new HashMap<String, String>();
    dicParameters.put("movie", "夏洛特烦恼");

    // 调用云函数
    AVCloud.callFunctionInBackground("publishPost", dicParameters, new FunctionCallback() {
        public void done(Object object, AVException e) {
            if (e == null) {
                // 处理返回结果
            } else {
                // 处理一场报错
            }
        }
    });
```
运行上述代码请确保已经正确安装了 LeanCloud Android SDK，详细请点击[LeanCloud Android SDK 安装指南](sdk_setup-android.html)。

## 定时任务

定时任务可以按照设定，以一定间隔自动完成指定动作，比如半夜清理过期数据，每周一向所有用户发送推送消息等等。定时任务的最小时间单位是**秒**，正常情况下时间误差都可以控制在秒级别。

{% block timerLegacy %}{% endblock %}

定时任务是普通的云引擎函数。比如定义一个打印循环打印日志的任务 `log_timer`：

{% block timerExample %}{% endblock %}

部署云引擎之后，进入云引擎管理菜单，左侧有个定时任务菜单：

![image](images/schedule_timer1.png)

选择创建定时器，选择定时任务执行的函数名称，执行环境等等：

![image](images/schedule_timer2.png)

定时任务分为两类：

* 使用标准的 crontab 语法调度
* 简单的循环调度，我们这里以循环调度为例，每隔 5 分钟打印日志。

创建后，定时任务还没有启动，你需要在定时任务列表里启动这个任务：

![image](images/schedule_timer3.png)

接下里就可以在云引擎日志里看到这条日志的打印：

![image](images/schedule_timer4.png)

我们再尝试定义一个复杂一点的任务，比如每周一早上 8 点准时发送推送消息给用户：

{% block timerExample2 %}{% endblock %}

创建定时器的时候，选择 cron 表达式并填写为 `0 0 8 ? * MON`。

### Cron 表达式

Cron 表达式的基本语法为：

```
<秒> <分钟> <小时> <日期 day-of-month> <月份> <星期 day-of-week> <年>
```
位置|字段|约束|取值|可使用的特殊字符
---|---|---|---|---
1|秒|必须|0-59|`, - * /`
2|分钟|必须|0-59|`, - * /`
3|小时|必须|0-23（0 为午夜）|`, - * /`
4|日期|必须|1-31|`, - * ? / L W`
5|月份|必须|1-12、JAN-DEC|`, - * /`
6|星期|必须|1-7、SUN-SAT|`, - * ? / L #`
7|年|可选|空、1970-2099|`, - * /`

特殊字符的用法：

字符|含义|用法
---|---|---
`*`|所有值|代表一个字段的所有可能取值。如将 `<分钟>` 设为 **\***，表示每一分钟。
`?`|不指定值|用于可以使用该字符的两个字段中的一个，在一个表达式中只能出现一次。如任务执行时间为每月 10 号，星期几无所谓，那么表达式中 `<日期>` 设为 **10**，`<星期>` 设为 **?**。
`-`|范围|如 `<小时>` 为 **10-12**，即10 点、11 点、12 点。
`,`|<span class="text-nowrap">分隔多个值</span>|如 `<星期>` 为 **MON,WED,FRI**，即周一、周三、周五。
`/`|增量|如 `<秒>` 设为 **0/15**，即从 0 秒开始，以 15 秒为增量，包括 0、15、30、45 秒；**5/15** 即 5、20、35、50 秒。**\*/** 与 **0/** 等效，如 `<日期>` 设为 **1/3**，即从每个月的第一天开始，每 3 天（即每隔 2 天）执行一次任务。
`L`|最后|其含义随字段的不同而不同。 `<日期>` 中使用 **L** 代表每月最后一天，如 1 月 31 号、2 月 28 日（非闰年）；`<星期>` 中单独使用 **L**，则与使用 **7** 或 **SAT** 等效，若前面搭配其他值使用，如 **6L**，则表示每月的最后一个星期五。<br/><br/>注意，**在 L 之前不要使用多个值或范围**，如 **1,2L**、**1-2L**，否则会产生错误结果。
`W`|weekday|周一到周五的任意一天，离指定日期最近的非周末的那一天。<br/>`<日期>` 为 **15W** 即离 15 号最近的非周末的一天；如果 15 号是周六，任务则会在 14 号周五触发，如果 15 号是周日，则在 16 号周一触发，如果 15 号是周二，则周二当天触发。<br/><br/>`<日期>` 为 **1W**，如果 1 号是周六，任务则会在 3 号周一触发，因为不能向前跨月来计算天数。<br/><br/>在 `<日期>` 中 **W** 之前只能使用一个数值，不能使用多个值或范围。**LW** 可在 `<日期>` 中组合使用，表示每月最后一个非周末的一天。
`#`|第 N 次|如 `<星期>` 为 **6#3** 代表每月第三个周五，**2#1** 为每月头一个周一，**4#5** 为每月第五个周三；如果当月没有第五周，则 **#5** 不会产生作用。

各字段以空格或空白隔开。JAN-DEC、SUN-SAT 这些值不区分大小写，比如 MON 和 mon 效果一样。更详细的使用方法请参考 [Quartz 文档（英文）][quartz_docs]。

### 错误信息

定时器执行后的日志会记录在 [控制台 > 存储 > 云引擎 > 其它 > 日志](/cloud.html?appid={{appid}}#/log) 中，以下为常见的错误信息及原因。

- **timerAction timed-out and no fallback available.**<br/>
  某个定时器触发的云函数，因 15 秒内没有响应而超时。
- **timerAction short-circuited and no fallback available.**<br/>
  某个定时器触发的云函数，因为太多次超时而停止触发。

## 资源限制

### 权限说明

云引擎可以有超级权限，使用 master key 调用所有 API，因此会忽略 ACL 和 Class Permission 限制。你只需要使用下列代码来初始化 SDK：

{% block masterKeyInit %}{% endblock %}

如果在你的服务端环境里也想做到超级权限，也可以使用该方法初始化。

{% block masterKeyInitLegacy %}{% endblock %}

### 定时器数量

生产环境和预备环境的定时器数量都限制在 3 个以内，也就是说你总共最多可以创建 6 个定时器。

### 超时

请求云引擎上的云函数时会经过负载均衡设备，该设备会限制一次请求的超时时间为 15 秒，如果超过 15 秒没有返回，请求将被强制停止，但此时云引擎的方法可能仍在执行，但执行完毕后的响应是无意义的。所有 Hook 函数，如 `beforeSave` 和 `afterSave` 的超时时间限制在 3 秒内。如果 Hook 函数被其他的云函数调用（比如因为 save 对象而触发 `beforeSave` 和 `afterSave`），那么它们的超时时间会进一步被其他云函数调用的剩余时间限制。例如，如果一个 `beforeSave` 函数是被一个已经运行了 13 秒的云函数触发，那么 `beforeSave` 函数就只剩下 2 秒的时间来运行，而正常情况下是 3 秒的限制。

网站托管的动态请求超时也被限定为 15 秒。

## 日志

[云引擎 / 日志](/cloud.html?appid={{appid}}#/log)，可以查看云引擎的部署和运行日志，还可以选择查看的日志级别：

![image](images/cloud_code_11.png)

如果你想打印日志到里面查看，可以直接输出到「标准输出」或者「标准错误」，这些信息会分别对应日志的 `info` 和 `error` 级别，比如下列代码会在 info 级别记录参数信息：

{% block loggerExample %}{% endblock %}

**注意**：如果你的日志输出过于频繁（超过 50 条/秒），我们会丢弃部分日志信息。


[quartz_docs]: http://www.quartz-scheduler.org/documentation/quartz-1.x/tutorials/crontrigger  "Quartz 文档"
