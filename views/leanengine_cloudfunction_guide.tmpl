# 云函数开发指南-{{platformName}}

云函数是云引擎({{productName}})的一个子模块，请确保阅读本文档之前，已经阅读了[云引擎服务概览](leanengine_overview.html)。


云函数指的是开发者在使用 LeanCloud SDK 的时候，针对服务端的功能有自己特殊的自定义需求的时候，可以使用 {{productName}} 提供的云函数来实现。云函数包含以下几种：

1. Hook 类型，比如有些应用想在用户注册时候给用户统一分配一个会员号，如果把生成会员号的代码放在客户端难免会造成编号冲突并且不便于统一算法，这个时候就可以使用云函数提供的 Hook 函数针对用户 login 接口做统一的处理。
2. 自定义类型，比如有些应用会需要计算用户的账单信息，账单的计算依赖于多张表的查询结果，如果都放在客户端去做，那么 iOS 要写一套算法，Android 也要写一套算法，这显然是工作冗余，因此如果可以在服务单放一个 HTTP（HTTPS）接口让每一个客户端统一调用就可以解决这个问题。

为了更好的介绍云函数的功能，我们设定一个如下的场景：一个给电影书籍评分的系统，假设把存储分数这个操作放在客户端，那么 iOS，Android 等诸多客户端都得构建几乎相同的一套算法业务逻辑代码，因此我们可以在 {{productName}} 上部署一套满足自己需求的云函数来实现这个功能。

介绍云函数之前，请确保您已仔细阅读了客户端 SDK 的开发指南，因为云函数在很多时候是与客户端联合起来才能发挥更大的效果。

## Hook 函数
{{storageName}} 提供的基于对象的存储，因此在客户端存储对象的时候，很多时候一些针对对象的统一操作需要在各个客户端进行相同的处理，正如前面说的统一为新注册用户提供唯一会员号，这种操作 {{productName}} 就通过 Hook 函数来开放给开发者自定义。

### {{hook_before_save}}
在将对象保存到云端数据表之前，可以对数据做一些清理或验证。例如，一条电影评论不能过长，否则界面上显示不开，需要将其截断至 140 个字符：

{% block beforeSaveExample %}{% endblock %}

### {{hook_after_save}}

在数据保存后触发指定操作，比如当一条留言保存后再更新一下所属帖子的评论总数：

{% block afterSaveExample %}{% endblock %}

再如，在用户注册成功之后，给用户增加一个新的属性 from 并保存：

{% block afterSaveExample2 %}{% endblock %}

如果 `afterSave` 函数调用失败，save 请求仍然会返回成功应答给客户端。`afterSave` 发生的任何错误，都将记录到云引擎日志里，可以到 [控制台 / 存储 / 云引擎 / 日志](https://leancloud.cn/cloud.html?appid={{appid}}#/log) 中查看。

### {{hook_before_update}}

{% block beforeUpdate %}
在更新对象前执行操作，这时你可以知道哪些字段已被修改，还可以在特定情况下拒绝本次修改：

{% block beforeUpdateExample %}{% endblock %}

**注意**：传入的对象是一个尚未保存到数据库的临时对象，并不保证与最终储存到数据库的对象完全相同，这是因为修改中可能包含自增、数组增改、关系增改等原子操作。
{% endblock %}

### {{hook_after_update}}

在更新对象后执行特定的动作，比如每次修改文章后记录下日志：

{% block afterUpdateExample %}{% endblock %}

### {{hook_before_delete}}

在删除一个对象之前做一些检查工作，比如在删除一个相册 Album 前，先检查一下该相册中还有没有照片 Photo：

{% block beforeDeleteExample %}{% endblock %}

### {{hook_after_delete}}

在被删一个对象后执行操作，例如递减计数、删除关联对象等等。同样以相册为例，这次我们不在删除相册前检查是否还有照片，而是在删除后，同时删除相册中的照片：

{% block afterDeleteExample %}{% endblock %}

### {{hook_on_verified}}

当用户通过邮箱或者短信验证时，对该用户执行特定操作。比如：

{% block onVerifiedExample %}{% endblock %}

函数的第一个参数是验证类型。短信验证为 `sms`，邮箱验证为 `email`。另外，数据库中相关的验证字段，如 `emailVerified` 不需要修改，系统会自动更新。

### {{hook_on_login}}

在用户登录之时执行指定操作，比如禁止在黑名单上的用户登录：

{% block onLoginExample %}{% endblock %}


## 自定义云函数
自定义云函数本质上是为了给开发者自定义服务端逻辑，例如有些应用的一些功能需要在服务端来实现，自定义云函数就提供了这种功能。

### 在线编写云函数
很多人使用 {{productName}} 是为了在服务端提供一些个性化的方法供各终端调用，而不希望关心诸如代码托管、npm 依赖管理等问题。为此我们提供了在线维护云函数的功能。

使用此功能，你需要注意：

* 会替代你之前 git 或者命令行部署的项目。
* 暂不提供主机托管功能。
* 维护的所有函数可以生成并导出一个完整的项目，供 git 或命令行部署（即将推出）。

![image](images/cloud_code_snippet.png)

左上角的 **创建函数** 可以新创建一个函数，在 `funcName` 输入框里面输入：`averageStars`，并在函数体内输入如下代码：

{% block code_averageStars_sample %}{% endblock %}

然后点击保存，保存成功之后，再点击发布。

上述代码完成的功能是从客户端获取传递过来的电影名称，然后在服务端进行计算，然后将计算结果返回给客户端，如果电影名称不存在则直接返回错误信息。

### 调用云函数

#### 通过 REST API 调用云函数
[REST API 调用云函数](rest_api.html#云函数-1) 是 LeanCloud 云端提供的统一的访问云函数的接口，所有的 SDK 也都是封装了这个接口实现对云函数进行调用的。

关于调试工具，我们推荐的工具有：[Postman](http://www.getpostman.com/) 以及 [Paw](#https://luckymarmot.com/paw) ，他们可以帮助开发者更方便地调试 Web API。

假设没有以上工具，也可以使用命令行进行调试：

```sh
curl -X POST -H "Content-Type: application/json; charset=utf-8" \
       -H "X-LC-Id: {{appid}}" \
       -H "X-LC-Key: {{appkey}}" \
       -H "X-LC-Prod: 0" \
       -d '{"movie":"夏洛特烦恼"}' \
https://leancloud.cn/1.1/functions/averageStars
``` 
上述命令行实际上就是向服务端发送一个 JSON 对象作为参数，参数的内容是告诉服务端要查询的电影的名字。

#### iOS /OS X SDK 调用云函数
在 iOS SDK 中，`AVCloud` 里面提供了一系列的静态方法实现客户端调用云函数，实例代码如下：

```objc
     // 构建传递给服务端的参数字典
     NSDictionary *dicParameters = [NSDictionary dictionaryWithObject:@"夏洛特烦恼" forKey:@"movie"];
    
    // 调用指定名称的云函数，并且传递参数
    [AVCloud callFunctionInBackground:@"averageStars" withParameters:dicParameters block:^(id object, NSError *error) {
        // 执行结果
    }];
```

运行上述代码请确保已经正确安装了 LeanCloud iOS / OS SDK，详细请点击[LeanCloud iOS / OS X SDK 安装指南](sdk_setup-ios.html)。

#### Android SDK 调用云函数
在 Android SDK 中，`AVCloud` 里面提供了一系列的静态方法实现客户端调用云函数，实例代码如下：

```java
    // 构建参数
    Map<String, String> dicParameters = new HashMap<String, String>();
    dicParameters.put("movie", "夏洛特烦恼");

    // 调用云函数
    AVCloud.callFunctionInBackground("publishPost", dicParameters, new FunctionCallback() {
        public void done(Object object, AVException e) {
            if (e == null) {
                // 处理返回结果
            } else {
                // 处理一场报错
            }
        }
    });
```
运行上述代码请确保已经正确安装了 LeanCloud Android SDK，详细请点击[LeanCloud Android SDK 安装指南](sdk_setup-android.html)。

## 定时任务

:TODO