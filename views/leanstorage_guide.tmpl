#  {{platform_title}} 数据存储开发指南

数据存储（LeanStorage）是 LeanCloud 提供的核心功能，它可以存储无模式化（Schema Free）的数据，换言之，字符串可以存，数字也可以存，图像，音频，视频等数据均可以存储在强大的 LeanCloud 云端，但是 LeanStorage 区别于数据库（DataBase），原因是 LeanStorage 并不是直接暴露数据库的操作接口给开发者去使用。我们把数据存储封装成一整套完整的开放的 REST API 接口提供给开发者去使用，而各个平台或者语言版本 SDK 只是对 REST API 的封装。

为了更好的引导初学者，我们从传统数据库入手，对比 LeanStorage 的使用方式，可以让开发者更好地理解。

## LeanStorage 初识
首先我们来看一条 SQL 语句：

```sql
INSERT INTO Todo (title, content) VALUES ('工程师周会', '每周工程师会议，周一下午2点')
```
这条语句的含义很好理解，绝大数关系型数据库都可以执行这条语句，执行的结果就是会在 Todo 表里增加一条新的数据。
但是使用传统的关系型数据库作为应用的数据源几乎无法避免以下的步骤：

* 插入数据之前一定要先创建一个表结构，并且在之后随着需求变化的时候，需要不停的做数据库的表结构修改以及数据维护。
* 每次插入数据的时候，都需要通过客户端与数据库连接进行数据的增删改查。

而 LeanStorage 提供了更优雅的解决方案。

使用 {{sdk_name}} 仅需如下简短的代码：

{% block code_quick_save_a_todo %}{% endblock %}

使用 LeanStorage 相对于传统关系型数据库的优势如下：

* 不需要单独针对表结构进行维护，例如，就刚才的案例来说，我需要新增一个字段 `location`，也就是表示这个日程安排（Todo）的地点，只需要将刚才的代码作如下变动即可：

{% block  code_quick_save_a_todo_with_location %}{% endblock %}

真正实现了数据的存储无模式化（Schema Free），随用随加。

* 所有请求都通过 HTTPS 请求访问标准的 REST API 来实现增删改查。每个平台或者语言的 SDK 实际上在底层都是调用 REST API。

LeanStorage 不仅仅是提供了存数据的服务，一切跟数据相关的操作（增删改查）都有对应接口提供给开发者。

LeanStorage 的存储模式分为以下几个类别：

* 对象
* 文件

但是对于初学者来说，应用数据存储的概念过于宽泛，为了方便开发者理解和使用，我们按照顺序逐一分章节介绍。

## 快速入门
如果想对 LeanStorage 有一个快速了解，建议阅读[快速入门](start.html)

## SDK 安装
{% block text_sdk_setup_link %}{% endblock %}

## 对象
LeanStorage 的对象——`{{baseObjectName}}` 是 LeanStorage 对复杂对象的封装，每个 AVObject 包含若干属性值对（key-value，也称「键值对」），属性的值是与 JSON 格式兼容的数据。 通过 REST API 保存对象需要将对象的数据通过 JSON 来编码。这个数据是无模式化的（Schema Free），这意味着你不需要提前标注每个对象上有哪些 key，你只需要随意设置 key-value 对就可以，云端会保存它。

### 保存对象
正如 [LeanStorage 初识](#LeanStorage 初识) 小节里面实现的保存一个 Todo 对象操作一样，现在我们保存一个 TodoFolder，它可以包含多个 Todo，类似于给行程按文件夹的方式分组，那么我需要新建这个对象(`{{baseObjectName}}`)，而在此之前我不需要特地去后台创建这个类（Class），仅仅需要如下代码，云端就会自动创建这个类：

{% block code_save_todo_folder %}{% endblock %}

创建完成之后，打开 [**控制台** > **存储**](https://leancloud.cn/data.html?appid={{appid}}#/)，点开 `TodoFolder` 类，查看刚才添加的数据，它除了我们自己添加的名称(name)，优先级(priority)之外，还有一些服务端内置的属性，具体的含义对照表如下：

属性名称|类型|描述
---|---|---
{{objectIdName}}|String|该对象唯一的 Id 标识
ACL|ACL|该对象的权限控制，实际上是一个 JSON 对象，控制台做了展现优化
{{createdAtName}}|Date|该对象被创建的 UTC 时间，控制台做了针对当地时间的展现优化
{{updatedAtName}} |Date|该对象最后一次被修改的时间

属性名（也称「键」，key），必须是由字母、数字或下划线组成的字符串；自定义的属性名，不能以 __（双下划线）开头。
属性值，可以是字符串、数字、布尔值，或是数组和字典。
在此也特地说明，以下为系统保留字段，不能作为属性名来使用：

``` 
acl             error            pendingKeys
ACL             fetchWhenSave    running
className       id               updatedAt
code            isDataReady      uuid
createdAt       keyValues
description     objectId
```

### 获取对象
参照上一小节的表格，每一个被成功保存在云端的对象一定会有一个唯一的 Id 标识—— `{{objectIdName}}`，因此获取对象的最基本的方法就是根据 `{{objectIdName}}` 查询到这个对象：

{% block code_get_todo_by_objectId %}{% endblock %}

#### 如何获取 objectId ？

{% block code_save_callback_get_objectId %}{% endblock %}

#### 访问对象的属性
访问 Todo 的属性可以通过如下代码：

{% block code_access_todo_folder_properties %}{% endblock %}

请注意以上代码中访问三个特殊属性（`{{objectIdName}}`, `{{createdAtName}}`, `{{updatedAtName}}`）的方式。
### 更新对象
更新对象的前提是对象的 `{{objectIdName}}` 属性必须不为空，而且是合法有效的，例如想要把 Todo 的 location 改成其他地方，可以如下做：

{% block code_update_todo_location %}{% endblock %}

SDK 内部会自动计算出哪些数据已经改变，并将修改过的的字段发送给 LeanCloud 云端。未更新的数据不会产生变动，这一点请不用担心

注意，需要特别声明是，更新操作是覆盖式的，云端会根据最后一次提交到服务器的有效请求更新数据。更新是字段级别的操作，未更新的字段不会产生变动，这一点请不用担心。

{% block text_fetch_when_save %}
#### 更新后获取最新值
为了减少网络传输，在更新对象操作后，对象本地的 updatedAt 字段（最后更新时间）会被刷新，但其他字段不会从云端重新获取。通过设置 fetchWhenSave 属性为 true，来获取更新字段在服务器上的最新结果，例如：

{% block code_fetch_todo_when_save %}{% endblock %}

{% endblock %}

**请注意，LeanStorage 上的更新对象都是针对单个对象，确保对象的 objectId 不为空才可以去更新对象。服务端判断一个对象是新增还是更新，是根据有没有 objectId 来决定的。**

#### 原子操作(Atomic Operation)
##### 计数器
为了存储一个计数器类型的数据, LeanCloud 提供对任何数字字段进行原子增加（或者减少）的功能。比如一条微博，我们需要记录有多少人喜欢或者转发了它。但可能很多次喜欢都是同时发生的，如果在每个客户端都直接把它们读到的计数值增加之后再写回去，那么极容易引发冲突和覆盖，导致最终结果不准。这时候怎么办？LeanCloud 提供了便捷的原子操作来实现计数器：

{% block code_atomic_operation_increment %}{% endblock %}

{% block text_atomic_operation_array %}
##### 数组
为了更好地存储数组类型的数据，SDK 提供了以下几种种不同的操作来自动更新数组字段：

{% block code_atomic_operation_array %}{% endblock %}

例如，Todo 对象有一个提醒日期(reminders)是一个数组，它代表的是这个日程会在哪些时间点提醒用户，比如有些拖延症患者会把闹钟设为早上的 7点10分，7点20分，以及7点30分，代码如下：

{% block code_set_array_value %}{% endblock %}

{% endblock %}

### 删除对象
假如某一个 TodoFolder 里面所有的 Todo 都已完成，用户想要删除这个 TodoFolder 对象，可以如下操作：

{% block code_delete_todo_folder_by_objectId %}{% endblock %}

{% block text_work_in_background %}
### 后台运行
细心的开发者已经发现，在所有的示例代码中几乎都是用了异步来访问 LeanCloud 云端，形如 `{{backgroundFunctionTemplate}}` 的方法都是提供给开发者在主线程调用用以实现后台运行的方法，因此开发者在主线程可以放心的调用这种命名方式的函数。

{% endblock %}

{% block save_eventually %}
### 离线存储对象

大多数保存功能可以立刻执行，并通知应用「保存完毕」。不过若不需要知道保存完成的时间，则可使用 {{saveEventuallyName}} 来代替。

它的优点在于：如果用户目前尚未接入网络，{{saveEventuallyName}} 会缓存设备中的数据，并在网络连接恢复后上传。如果应用在网络恢复之前就被关闭了，那么当它下一次打开时，LeanCloud 会再次尝试保存操作。

所有 {{saveEventuallyName}}（或 {{deleteEventuallyName}}）的相关调用，将按照调用的顺序依次执行。因此，多次对某一对象使用 {{saveEventuallyName}} 是安全的。

{% endblock %}

### 关联数据
#### {{relationObjectName}}
对象可以与其他对象相联系。如前面所述，我们可以把一个 {{baseObjectName}} 的实例 a，当成另一个 {{baseObjectName}} 实例 b 的属性值保存起来。这可以解决数据之间一对一或者一对多的关系映射，就像关系型数据库中的主外键关系一样。

例如，一个 TodoFolder 包含多个 Todo ，可以用如下代码实现：

{% block code_relation_todoFolder_one_to_many_todo %}{% endblock %}

#### Pointer
Pointer 只是个描述并没有具象的类与之对应，它与 {{relationObjectName}} 不一样的地方在于：{{relationObjectName}} 是在「一对多」的「一」这一方（上述代码中这个「一」就指的 TodoFolder）保存一个 {{relationObjectName}} 属性，这个属性实际上保存的是对被关联数据——「多」的这一方（上述代码中这个「多」指的是 Todo）的一个 Pointer 的集合。而反过来，LeanStorage 也支持在「多」的这一方保存一个指向「一」的这一方的 Pointer，这样也可以实现「一对多」的关系。

我们知道，每一个 TodoFolder 都会有一个用户与之对应，用以表示 TodoFolder 属于哪个用户，使用 Pointer 来实现这个需求的代码如下：

{% block code_pointer_user_one_to_many_todoFolder %}{% endblock %}

关于关联数据的查询会在[关联数据查询](#关联数据查询)会详细介绍。

### 数据类型
{{baseObjectName}} 支持的数据类型请参照如下表格：

{% block table_data_type %}{% endblock %}

#### 地理位置
地理位置是一个特殊的数据类型，LeanStorage 封装了 {{geoPointObjectName}} 来实现存储以及相关的查询。

{% block text_deserialize_and_serialize %}
### {{baseObjectName}} 序列化和反序列化
在实际的开发中，把 `{{baseObjectName}}` 当做参数传递的时候，会涉及到复杂对象的拷贝的问题，因此 `{{baseObjectName}}` 也提供了序列化和反序列化的方法：

序列化：
{% block code_serialize_baseObject_to_string %}{% endblock %}

反序列化：
{% block code_deserialize_string_to_baseObject %}{% endblock %}

{% endblock %}

## 文件
文件存储也是数据存储的一种方式，图像，音频，视频，通用文件等等都是数据的载体，另外很多开发者习惯了把复杂对象序列化之后保存成文件(常见的有 .json 或者 .xml 文件)，文件存储在 LeanCloud 中被单独封装成一个 {{fileObjectName}} 来实现文件的上传，下载等操作。

### 文件上传
文件的上传指的是开发者调用接口将文件存储在云端，并且返回文件最终 Url 的一个操作。

{% block text_create_avfile_by_stream_data %}
#### 从数据流构建文件
{{fileObjectName}} 支持图片、视频、音乐等常见的文件类型，以及其他任何二进制数据，在构建的时候，传入对应的数据流即可：

{% block code_create_avfile_by_stream_data %}{% endblock %}
{% endblock %}

{% block text_create_avfile_from_local_path %}
#### 从本地路径构建文件
大多数的客户端应用程序都会跟本地文件系统产生交互，常用的操作就是读取本地文件，如下代码可以实现使用本地文件路径构建一个 {{fileObjectName}}：
{% block code_create_avfile_from_local_path %}{% endblock %}

{% endblock %}

{% block text_create_avfile_from_url %}
#### 从网络路径构建文件
从一个已知的 Url 构建文件也是很多应用的需求，例如，从网页上拷贝了一个图像的链接，希望 SDK 能够读取并且上传到自己的应用内，之后的使用中不必担心原网址失效，而造成 UI 的缺失。

{% block code_create_avfile_from_url %}{% endblock %}

{% endblock %}

#### 执行上传
上传的操作调用方法如下：

{% block code_upload_file %}{% endblock %}

{% block text_upload_file_with_progress %}
#### 上传进度监听
一般来说，上传文件都会有一个上传进度条显示用以提高用户体验。因此，SDK 也提供了进度监听的接口：

{% block code_upload_file_with_progress %}{% endblock %}

{% endblock %}

### 文件下载
文件的下载我们更推荐开发者在当前语言平台下使用成熟的库去下载，因为只要文件的 Url 可以读取到，那么针对下载这个操作，开发者可以自由发挥的空间就很大，比如很多组件都支持客户端自动缩放等等实用的功能，当然 SDK 也提供的接口给开发者下载文件，但是需要提醒的是，文件下载是一个仁者见仁智者见智的功能，SDK 提供的接口仅仅**是将文件的下载之后做了缓存，只要文件的 Url 不变，那么一次下载成功之后，就不会再重复下载，目的是为了减少客户端的流量**。

{% block text_downlod_file %}
####  执行下载
SDK 提供的下载方法如下：

{% block code_downlod_file %}{% endblock %}

{% endblock %}

## 查询
{{baseQueryClassName}} 是构建针对 {{baseObjectName}} 查询的基础类。

{% block text_avquery_constructors %}
### 创建查询实例
#### 通过 {{baseQueryClassName}} 自身构造
{% block code_create_query_by_className %}{% endblock %}

#### 通过  {{baseObjectName}} 构造
{% block code_create_query_by_avobject %}{% endblock %}

{% endblock %}
### 根据 id 查询
在[获取对象](#获取对象)中我们介绍过如何通过 objectId 来获取对象实例，从而简单的介绍了一下 {{baseQueryClassName}} 的用法，代码请参考对应的内容，不再赘述。

### 条件查询
在大多数情况下做列表展现的时候，都是根据不同条件来分类展现的，比如，我要查询所有优先级为 0 的 Todo，也就是做列表展现的时候，要展示优先级最高，最迫切需要完成的日程列表，此时基于类别构建一个查询就可以查询出符合需求的对象：

{% block code_priority_equalTo_zero_query %}{% endblock %}

其实，拥有传统关系型数据库开发经验的开发者完全可以翻译成如下的 SQL ：

```sql
  select * from Todo where priority = 0
```
看到这里肯定会有开发者疑惑的问，LeanCloud 支持这种传统的 SQL 语句查询么？答案是：必须支持的。关于 SQL 语句构建查询请移步：[Cloud Query Language（CQL）查询](#Cloud Query Language（CQL）查询)
#### 比较查询

{% block table_logic_comparison_in_query %}{% endblock %}

利用上述表格介绍的逻辑操作的接口，我们可以很快地构建条件查询。

例如，查询优先级小于 2 的所有 Todo ：

{% block code_query_lessThan %}{% endblock %}

要查询优先级大于等于 2 的 Todo：

{% block code_query_greaterThanOrEqualTo %}{% endblock %}

**需要注意的是：比较查询只能适用于可比较大小的数据类型，例如整型，浮点等。**

#### 正则匹配查询
正则匹配查询是指在查询条件中使用正则表达式来匹配数据，查询指定的 key 对应的 value 符合正则表达式的所有对象。
例如，要查询标题包含中文的 Todo 对象可以使用如下代码：

{% block code_query_with_regular_expression %}{% endblock %}

**需要注意的是：比较查询只能适用于字符串类型的数据**
#### 包含查询
包含查询类似于传统 SQL 语句里面的 `LIKE %keyword%` 的查询，比如我想查询标题包含李总的 Todo，应该使用如下代码：

{% block code_query_with_contains_keyword %}whereContains{% endblock %}

而以上查询翻译成 SQL 语句就是：

```sql
  select * from Todo where title LIKE %李总%
```
不包含查询与包含查询是对立的，查询那些不包含指定关键字的对象的功能该如何实现？这个我们推荐开发者使用上一小节[正则匹配查询](#正则匹配查询)的方法，自己构建正则表达式，
例如，查询标题不包含机票的 Todo ：

{% block code_query_with_not_contains_keyword_using_regex %}正则表达式{% endblock %}

而还有一个接口可以实现精确的匹配不包含，比如我要查询标题不等于出差的 Todo 对象：

{% block code_query_with_not_contains_keyword %}notContainedIn{% endblock %}

#### 数组查询
当一个对象有一个属性是数组的时候，针对数组的元数据查询可以有多种方式。
例如，在[数组](#数组)一小节里面，我们设置了 Todo 的 reminders 属性，它就是一个日期数组，现在我们需要查询所有在 8 点 30 分会响起闹钟的 Todo 对象：

{% block code_query_array_contains_using_equalsTo %}{% endblock %}

有包含的查询是需要精确匹配的，比如我要查询在只在 8 点 30 分，9 点 30 分这两个时间点响起闹钟的 Todo，可以使用如下代码：

{% block code_query_array_contains_all %}{% endblock %}

假如有一个 Todo 会在 8 点 30 分，9 点 30 分 以及 10 点 30 分响起闹钟，它是不会被查询出来的。

### 关联数据查询
关联数据查询也可以通俗地理解为关系查询，关系查询在传统型数据库的使用中是很常见的需求，因此我们也提供了相关的接口来满足开发者针对关联数据的查询。

首先，我们需要明确关系的存储方式，再来确定对应的查询方式。

#### Pointer 查询
基于在[Pointer](#Pointer)小节介绍的存储方式：每一个 TodoFolder 都会有一个用户与之对应，用以表示 TodoFolder 属于哪个用户。现在我已知一个用户，想查询 TA 拥有的 TodoFolder，可以使用如下代码：

{% block code_query_TodoFolder_by_user %}{% endblock %}

#### {{relationObjectName}} 查询
假如用户可以给 TodoFolder 增加一个 Tag 选项，用以表示它的标签，而为了以后拓展 Tag 的属性，就新建了一个 Tag 对象，如下代码是创建 Tag 对象：

{% block code_create_tag_object %}{% endblock %}

而 Tag 的意义在于一个 TodoFolder 可以拥有多个 Tag，比如「家庭」（TodoFolder） 拥有的 Tag 可以是：今日必做，老婆吩咐，十分重要。实现创建「家庭」这个 TodoFolder 的代码如下：

{% block code_create_family_with_tag %}{% endblock %}

查询一个 TodoFolder 的所有 Tag 的方式如下：

{% block code_query_tag_for_todoFolder %}{% endblock %}

反过来，现在已知一个 Tag，要查询有多少个 TodoFolder 是拥有这个 Tag 的，可以使用如下代码查询：

{% block code_query_todoFolder_with_tag %}{% endblock %}

关于关联数据的建模是一个复杂的过程，很多开发者因为在存储方式上的选择失误导致最后构建查询的时候难以下手，不但客户端代码冗余复杂，而且查询效率低，为了解决这个问题，我们专门针对关联数据的建模推出了一个详细的文档予以介绍，详情请点击：{% block link_to_relation_guide_doc %}{% endblock %}

### 查询约束

#### 获取查询的第一个结果
例如很多应用场景下，只要获取满足条件的一个结果即可，例如随机获取一个今天之前创建的 Todo：

{% block code_query_find_first_object %}{% endblock %}

#### 设置返回的结果数量 
为了防止查询出来的结果过大，服务端默认针对查询结果有一个数量（limit）的限制，比如一个查询的结果如果有 10000个对象，那么一次查询只会返回符合条件的 100 个结果，并且 limit 允许取值范围从 1 到 1000。例如设置返回 10 条结果的代码如下：

{% block code_set_query_limit %}{% endblock %}

#### 设置跳过的数量
客户端做列表展现的时候，尤其是在庞大的数据做展现的时候，一定会用到翻页技术，在查询的时候设置 skip 这个参数就可以告知服务端，本次查询跳过多少个结果。
例如，客户端做翻页展现，一页显示的数量是 10 个，我要获取第 3 页的对象，可以使用如下代码：

{% block code_set_skip_for_pager %}{% endblock %}

#### 获取符合查询条件的数量
在任何一个电商网站的搜索框输入关键字，点击搜索，它除了会展现符合条件的商品列表之外，一般都会在列表的开头显示如下语句：`搜索到符合条件的结果有 1020 条 ` 诸如此类，也就是说，它会有好的提示您，符合查询条件的结果数量，这样的需求，我们也提供了相对应的接口。

例如，我们要查询今天一共完成了多少条 Todo，可以使用如下代码：

{% block code_query_count %}{% endblock %}

### 组合查询
组合查询的概念就是把诸多查询条件合并成一个查询，再交给 SDK 去云端进行查询。
组合的方式无外乎两种：OR 和 AND。

#### OR 查询
OR 操作表示多个查询条件符合其中任意一个即可。 

例如要查询优先级是大于等于 3 或者已经完成了的 Todo：

{% block code_query_with_or %}{% endblock %}

#### AND 查询
AND 操作指的是对象必须满足所有的查询条件才会返回给客户端。

例如要查询优先级小于 1 并且尚未完成的 Todo：

{% block code_query_with_and %}{% endblock %}

可以对新创建的 {{baseQueryClassName}} 添加额外的约束，多个约束将以 AND 运算符来联接。

### Cloud Query Language（CQL）查询
Cloud Query Language（CQL） 是 LeanStorage 独创的云端类 SQL 语句实现查询的方式。方便有 SQL 开发经验的开发者使用查询接口。

查询 status 等于 1 的 Todo 和 查询 priority 等于 0 的 Todo 的数量：
{% block code_query_by_cql %}{% endblock %}

通常，查询语句会使用变量参数。为此，我们提供了与 Java JDBC 所使用的 PreparedStatement 占位符查询相类似的语法结构。

查询 status 等于 0 并且 priority 等于 1 的 Todo：

{% block code_query_by_cql_with_placeholder %}{% endblock %}

关于 Cloud Query Language（CQL）查询我们专门提供了一个更为详细的文档，请点击[Cloud Query Language 详细指南](cql_guide.html)。

{% block text_query_cache_intro %}
### 缓存查询
缓存一些查询的结果到磁盘上，这可以让你在离线的时候，或者应用刚启动，网络请求还没有足够时间完成的时候可以展现一些数据给用户。当缓存占用了太多空间的时候，LeanCloud 会自动清空缓存。

默认情况下的查询不会使用缓存，除非你调用接口明确设置启用。例如，尝试从网络请求，如果网络不可用则从缓存数据中获取，可以这样设置：

{% block code_set_cache_policy %}{% endblock %}

#### 缓存策略
为了满足多变的需求，SDK 默认提供了以下几种缓存策略：

{% block table_cache_policy %}{% endblock %}

#### 缓存相关的操作
{% block code_cache_opration %}{% endblock %}

{% endblock %}

### 地理位置查询
地理位置查询是较为特殊的查询，一般来说，常用的业务场景是查询距离 xx 米之内的某个位置或者是某个建筑物，甚至是以手机为圆心，查找方圆多少范围内餐厅，诸如此类，对此，{{sdk_name}} 提供了一系列的方法来实现各种针对地理位置的查询。

## 应用内搜索
应用内搜索是一个针对应用数据进行全局搜索的接口，它基于搜索引擎构建，提供更强大的搜索功能，深入了解其用法和阅读示例代码请点击 {% block link_to_in_app_search_doc %}{% endblock %}

## 用户
用户系统是每一个应用都会拥有的功能，注册，登录，密码重置的传统功能暂且不表，随着移动开发的趋势，手机号一键登录，手机短信验证码登录等等诸多与用户相关的功能都逐渐被很多应用接纳，因此 LeanStorage 提供了一系列的接口，帮助开发者实现各种场景下的用户模块里面的功能。

{{userObjectName}} 是 LeanStorage 封装的用来描述一个用户的特殊对象。下面的章节将围绕 {{userObjectName}}，按照功能接口逐一展示其用法和可以实现的功能。

### 注册

#### 手机号一键登录
一些应用为了提高首次使用的友好度，一般会允许用户浏览一些内容，直到用户发起了一些操作才会要求用户输入一个手机号，而云端会自动发送一条验证码的短信给用户的手机号，最后验证一下，完成一个用户注册并且登录的操作，例如很多团购类应用都有这种用户场景。

#### 用户名和密码注册
用户名和密码注册的时候需要注意的是：密码在是以明文的方式使用 HTTPS 加密传输给云端，而我们保证所有密码都是密文存储，并且我们的加密算法是无法通过所谓彩虹表撞库获取的，这一点请开发者放心，换言之用户的密码只可能用户本人知道，开发者不论是通过控制台还是 API 都是无法获取的。另外我们需要强调**在客户端，应用切勿再次对密码加密，这会导致重置密码等功能失效。**

例如，使用 Tom 作为用户名，cat!@#123 作为密码注册一个用户的代码如下：

{% block code_user_signUp_with_username_and_password %}{% endblock %}

像往常一样，我们建议，在可能的情况下，尽量使用异步版本的方法，这样就不会影响到应用程序主 UI 线程的响应。

如果注册不成功，请检查一下返回的错误对象。最有可能的情况是，用户名或电子邮件已经被另一个用户注册，此时可以提示用户尝试用不同的用户名进行注册，也可以要求用户用 Email 做为用户名注册。

这样做的好处是，在用户提交信息时可以将输入的「用户名」默认设置为用户的 Email 地址，以后在用户忘记了密码的情况下，可以使用 LeanCloud 提供的「重置密码」功能。

关于自定义邮件模板和验证链接，请参考博客文章 [《自定义应用内用户重设密码和邮箱验证页面》](http://blog.leancloud.cn/blog/2014/01/09/zi-ding-yi-ying-yong-nei-yong-hu-zhong-she-mi-ma-he-you-xiang-yan-zheng-ye-mian/)。

#### 设置手机号
微信，陌陌等流行的应用都会建议用户的账号和一个手机号绑定，这样方便进行身份认证以及日后的密码找回等安全模块的使用，为此，在注册用户的时候也可以设置手机号，并且我们提供了一整套发送短信验证码以及验证手机号的流程。

这部分流程以及代码演示请参考 {% block link_to_sms_guide_doc %}{% endblock %}

### 登录
我们提供了多种登录方式，以满足不同场景的应用。

#### 用户名密码登录

{% block code_user_logIn_with_username_and_password %}{% endblock %}

#### 手机号密码登录
请确保已详细阅读了 {% block link_to_sms_guide_doc %}{% endblock %} 这一小节的内容，才可以顺利理解手机号匹配密码登陆的流程以及适用范围。

用户的手机号只要经过了验证，就可以使用手机号密码登陆的功能，否则登陆会失败。

{% block code_user_logIn_with_mobilephonenumber_and_password %}{% endblock %}

#### 手机号验证码登陆
中国电信，中国联通，中国移动三大运营商的官网登录都支持 2 种方式，一种是手机号和密码，另一种就是手机号和随机的验证码登录，我们也提供了这种方式。

首先，调用发送登录验证码的接口：

{% block code_user_logIn_requestLoginSmsCode %}{% endblock %}

然后在界面上引导用户输入收到的 6 位短信验证码：

{% block code_user_logIn_with_smsCode %}{% endblock %}

### 用户的属性

#### 默认属性
用户名，密码，邮箱是默认提供的三个属性。

{% block code_get_user_properties %}{% endblock %}

#### 自定义属性
用户对象和普通对象一样也支持添加自定义属性。

{% block code_set_user_custom_properties %}{% endblock %}

#### 属性的修改
这一章节内容尤为重要，因为很多开发者会产生疑惑：为什么我不能修改任意一个用户的属性？
这里需要解释的是：

> 很多时候，就算是开发者也不要轻易修改用户的基本信息，比如用户的一些比较敏感的个人信息，例如手机号，社交账号等，这些都应该让用户在App中自行修改，所以为了用户数据的数据有且仅有自己在登录的情况下得以修改，LeanStorage 云端对所有针对 {{userObjectName}} 对象的数据做了验证。

假如，为用户添加了一个自定义属性 age ，设置为 27 岁，然后再之后的代码中修改这个属性，需要如下做：

{% block code_update_user_custom_properties %}{% endblock %}

### 重置密码

#### 邮箱重置密码

我们都知道，应用一旦加入账户密码系统，那么肯定会有用户忘记密码的情况发生。对于这种情况，我们为用户提供了一种安全重置密码的方法。

重置密码的过程很简单，用户只需要输入注册的电子邮件地址即可：

{% block code_reset_password_by_email %}{% endblock %}


密码重置流程如下：

1. 用户输入注册的电子邮件，请求重置密码；
2. LeanCloud 向该邮箱发送一封包含重置密码的特殊链接的电子邮件；
3. 用户点击重置密码链接后，一个特殊的页面会打开，让他们输入新密码；
4. 用户的密码已被重置为新输入的密码。

关于自定义邮件模板和验证链接，请参考这篇 [博客](http://blog.leancloud.cn/blog/2014/01/09/zi-ding-yi-ying-yong-nei-yong-hu-zhong-she-mi-ma-he-you-xiang-yan-zheng-ye-mian/) 

#### 手机号码重置密码

与使用「电子邮件地址重置密码」类似，「手机号码重置密码」使用下面的方法来获取短信验证码：

{% block code_reset_password_by_mobilephoneNumber %}{% endblock %}

注意！用户需要先绑定手机号码，然后使用短信验证码来重置密码：

{% block code_reset_password_by_mobilephoneNumber_verify %}{% endblock %}

### 用户的查询
**请注意，新创建应用的 `_User` 表的查询权限默认是关闭的，通常我们推荐你在云引擎里封装用户查询，只查询特定条件的用户，避免开放用户表的全部查询权限。此外，你可以通过 class 权限设置打开查询权限，请参考 [数据与安全 - Class 级别的权限](data_security.html#Class_级别的权限)。**

{% block code_query_user %}{% endblock %}

### 浏览器中查看用户表

User 表是一个特殊的表，专门存储 AVUser 对象。在浏览器端，你会看到一个 _User 表。

## 角色
关于用户与角色的关系，我们有一个更为详尽的文档介绍这部分的内容，并且针对权限管理有深入的讲解，详情请点击 {% block link_to_acl_doc %}{% endblock %}

{% block text_subclass %}
## 子类化
子类化推荐给进阶的开发者在进行代码重构的时候做参考。
你可以用 `AVObject` 访问到所有的数据，用 `objectForKey:` 获取任意字段。 在成熟的代码中，子类化有很多优势，包括降低代码量，具有更好的扩展性，和支持自动补全。

子类化是可选的，请对照下面的例子来加深理解：

``` 
AVObject *student = [AVObject objectWithClassName:@"Student"];
[student setObject:@"小明" forKey:@"name"];
[student saveInBackground];
```

可改写成:

``` 
Student *student = [Student object];
student.name = @"小明";
[student saveInBackground];
```

这样代码看起来是不是更简洁呢？

### 子类化的实现

要实现子类化，需要下面几个步骤：

1. 导入 `AVObject+Subclass.h`；
2. 继承 `AVObject` 并实现 `AVSubclassing` 协议；
3. 实现类方法 `parseClassName`，返回的字符串是原先要传给 `initWithClassName:` 的参数，这样后续就不必再进行类名引用了。如果不实现，默认返回的是类的名字。**请注意： `AVUser` 子类化后必须返回 `_User`**；
4. 在实例化子类之前调用 `[YourClass registerSubclass]`（**在应用当前生命周期中，只需要调用一次**，所以建议放在 `ApplicationDelegate` 中，在 `[AVOSCloud setApplicationId:clientKey:]` 之前调用即可）。

下面是实现 `Student` 子类化的例子:

``` objc
  //Student.h
  #import <AVOSCloud/AVOSCloud.h>

  @interface Student : AVObject <AVSubclassing>

  @property(nonatomic,copy) NSString *name;

  @end


  //Student.m
  #import "Student.h"

  @implementation Student

  @dynamic name;

  + (NSString *)parseClassName {
      return @"Student";
  }

  @end


  // AppDelegate.m
  #import <AVOSCloud/AVOSCloud.h>
  #import "Student.h"

  - (BOOL)application:(UIApplication *)application
  didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    [Student registerSubclass];
    [AVOSCloud setApplicationId:appid clientKey:appkey];
  }
```

### 属性

为 `AVObject` 的子类添加自定义的属性和方法，可以更好地将这个类的逻辑封装起来。用 `AVSubclassing` 可以把所有的相关逻辑放在一起，这样不必再使用不同的类来区分业务逻辑和存储转换逻辑了。

`AVObject` 支持动态 synthesizer，就像 `NSManagedObject` 一样。先正常声明一个属性，只是在 .m 文件中把 `@synthesize` 变成 `@dynamic`。

请看下面的例子是怎么添加一个「年龄」属性：

``` objc
  //Student.h
  #import <AVOSCloud/AVOSCloud.h>

  @interface Student : AVObject <AVSubclassing>

  @property int age;

  @end


  //Student.m
  #import "Student.h"

  @implementation Student

  @dynamic age;

  ......
```

这样就可以通过 `student.age = 19` 这样的方式来读写 `age` 字段了，当然也可以写成：

``` objc
[student setAge:19]
```

**注意：属性名称保持首字母小写！**（错误：`student.Age` 正确：`student.age`）。

`NSNumber` 类型的属性可用 `NSNumber` 或者是它的原始数据类型（`int`、 `long` 等）来实现。例如， `[student objectForKey:@"age"]` 返回的是 `NSNumber` 类型，而实际被设为 `int` 类型。

你可以根据自己的需求来选择使用哪种类型。原始类型更为易用，而 `NSNumber` 支持 `nil` 值，这可以让结果更清晰易懂。

**注意** 子类中，对于 `BOOL` 类型的字段，SDK 在 3.1.3.2 之前会将其保存为 Number 类型，3.1.3.2 之后将其正确保存为 Bool 类型。详情请参考[这里](https://leancloud.cn/docs/ios_os_x_faq.html#为什么升级到_3_1_3_2_以上的版本时_BOOL_类型数据保存错误_)。

注意：`AVRelation` 同样可以作为子类化的一个属性来使用，比如：

``` objc
@interface Student : AVUser <AVSubclassing>
@property(retain) AVRelation *friends;
  ......
@end

@implementation Student
@dynamic friends;
  ......
```

另外，值为 Pointer 的实例可用 `AVObject*` 来表示。例如，如果 `Student` 中 `bestFriend` 代表一个指向另一个 `Student` 的键，由于 Student 是一个 AVObject，因此在表示这个键的值的时候，可以用一个 `AVObject*` 来代替：

``` objc
@interface Student : AVUser <AVSubclassing>
@property(nonatomic, strong) AVObject *bestFriend;
 ......
@end

@implementation Student
@dynamic bestFriend;
  ......
```

提示：当需要更新的时候，最后都要记得加上 `[student save]` 或者对应的后台存储函数进行更新，才会同步至服务器。

如果要使用更复杂的逻辑而不是简单的属性访问，可以这样实现:

``` objc
  @dynamic iconFile;

  - (UIImageView *)iconView {
    UIImageView *view = [[UIImageView alloc] initWithImage:kPlaceholderImage];
    view.image = [UIImage imageNamed:self.iconFile];
    return [view autorelease];
  }

```

### 针对 AVUser 子类化的特别说明

假如现在已经有一个基于 `AVUser` 的子类，如上面提到的 `Student`:

``` objc
@interface Student : AVUser<AVSubclassing>
@property (retain) NSString *displayName;
@end


@implementation Student
@dynamic displayName;
+ (NSString *)parseClassName {
    return @"_User";
}
@end
```

登录时需要调用 `Student` 的登录方法才能通过 `currentUser` 得到这个子类:

``` objc
[Student logInWithUsernameInBackground:@"USER_NAME" password:@"PASSWORD" block:^(AVUser *user, NSError *error) {
        Student *student = [Student currentUser];
        student.displayName = @"YOUR_DISPLAY_NAME";
    }];
```

同样需要调用 `[Student registerSubclass];`，确保在其它地方得到的对象是 Student，而非 AVUser 。

### 初始化子类

创建一个子类实例，要使用 `object` 类方法。要创建并关联到已有的对象，请使用 `objectWithoutDataWithObjectId:` 类方法。

### 子类查询

使用类方法 `query` 可以得到这个子类的查询对象。

例如，查询年龄小于 21 岁的学生：

``` objc
  AVQuery *query = [Student query];
  [query whereKey:@"age" lessThanOrEqualTo:@(21)];
  [query findObjectsInBackgroundWithBlock:^(NSArray *objects, NSError *error) {
    if (!error) {
      Student *stu1 = [objects objectAtIndex:0];
      // ...
    }
  }];
```


{% endblock %}
